[LocalizedFileNames]
Screenshot 2024-09-23 013538.png=@Screenshot 2024-09-23 013538,0
Screenshot 2024-09-23 014630.png=@Screenshot 2024-09-23 014630,0
Screenshot 2024-09-23 014835.png=@Screenshot 2024-09-23 014835,0
Screenshot 2024-09-23 015329.png=@Screenshot 2024-09-23 015329,0

Lambda expressions, also known as anonymous functions, are a powerful feature introduced in C++11. They allow you to define small, unnamed functions inline, often within a larger expression. This can make your code more concise and readable, especially when dealing with simple operations.

Basic Syntax:

C++
[capture list](parameter list) -> return type {
    // function body
}
Use code with caution.

Let's break down the components:

Capture List:

Specifies which variables from the surrounding scope should be accessible within the lambda.
Options:
[]: Captures nothing (default).
[variable1, variable2, ...]: Captures specific variables by value.
[&variable1, &variable2, ...]: Captures specific variables by reference.
[=] Captures all variables in scope by value.
[&] Captures all variables in scope by reference.
Parameter List:

Specifies the parameters the lambda function accepts, similar to a regular function.
Return Type:

Specifies the type of value the lambda returns. It can be omitted if the return type can be deduced from the function body (trailing return type).
Function Body:

Contains the code that defines the lambda's behavior.
Example:

C++
#include <iostream>

int main() {
    int x = 10;
    auto lambda = [x]() {
        std::cout << "Value of x: " << x << std::endl;
    };

    lambda(); // Output: Value of x: 10

    return 0;
}
Use code with caution.

In this example:

The lambda captures x by value, meaning it creates a copy of x within the lambda's scope.
When the lambda is called, it prints the value of the captured x.
Using Lambda Expressions with Algorithms:

Lambda expressions are often used with algorithms from the <algorithm> header to perform custom operations on collections. For instance, to sort a vector of integers in descending order:

C++
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};

    std::sort(numbers.begin(), numbers.end(), 1  Â  
 1. 
hyperskill.org
hyperskill.org
 [](int a, int b) {
        return a > b; // Sort in descending order
    });

    for (int number : numbers) {
        std::cout << number << " ";
    }

    return 0;
}
Use code with caution.

Here, the lambda expression [](int a, int b) { return a > b; } defines a custom comparison function for the std::sort algorithm.

Key Points:

Lambda expressions are concise and can improve code readability.
They can capture variables from the surrounding scope.
They can be used with standard library algorithms to perform custom operations.
They can be assigned to variables and passed as arguments to functions.
By understanding and effectively using lambda expressions, you can write more expressive and efficient C++ code.
